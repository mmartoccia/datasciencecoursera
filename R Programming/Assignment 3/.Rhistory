install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
exit
qquit()
qquit()
quit
install.packages(c('ggplot2', 'shiny'))
shiny::runApp()
ibrary(shiny)
runApp()
library(shinyapps)
deployApp()
getwd
getwd()
cube <- fucntion(x, n0 {x^3})
cube <- function(x, n0 {x^3})
cube <- function(x, n) {}
cube <- function(x, n) {x^3}
cube(3)
}
x <- 1:10
x <- 1:10
if(x > 5) {x <- 0}
if(x > 5) {
}
if(x > 5) {x <- 0}
}
}
f(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
}
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
setwd("~/GitHub/datasciencecoursera/R Programming")
setwd("~/GitHub/datasciencecoursera/R Programming/specdata/specdata")
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
}
setwd("~/GitHub/datasciencecoursera/R Programming/specdata")
pollutemean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
}
pollutantmean("specdata", "sulfate", 1:10)
ls()
dir()
setwd("~/GitHub/datasciencecoursera/R Programming/specdata/specdata")
ls
ls()
dir()
initial <- read.table("001.csv")
initial
initial <- read.table("002.csv")
initial
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
directory <- read.csv()
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
source("obsFileName.R")
allData <- numeric()
for (i in id) {
filename <- obsFileName(directory, i)
data <- read.csv(filename)
if (pollutant == "sulfate") {
allData <- c(allData, data$sulfate)
} else if (pollutant == "nitrate") {
allData <- c(allData, data$nitrate)
}
}
mean(allData, na.rm=TRUE)
}
}
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
directory <- read.csv()
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
source("obsFileName.R")
allData <- numeric()
for (i in id) {
filename <- obsFileName(directory, i)
data <- read.csv(filename)
if (pollutant == "sulfate") {
allData <- c(allData, data$sulfate)
} else if (pollutant == "nitrate") {
allData <- c(allData, data$nitrate)
}
}
mean(allData, na.rm=TRUE)
}
}
pollutantmean("specdata", "sulfate", 1:10)
setwd("~/GitHub/datasciencecoursera/R Programming/specdata")
function (file, header = FALSE, sep = "", quote = "\"'", dec = ".",
numerals = c("allow.loss", "warn.loss", "no.loss"), row.names,
col.names, as.is = !stringsAsFactors, na.strings = "NA",
colClasses = NA, nrows = -1, skip = 0, check.names = TRUE,
fill = !blank.lines.skip, strip.white = FALSE, blank.lines.skip = TRUE,
comment.char = "#", allowEscapes = FALSE, flush = FALSE,
stringsAsFactors = default.stringsAsFactors(), fileEncoding = "",
encoding = "unknown", text, skipNul = FALSE)
{
if (missing(file) && !missing(text)) {
file <- textConnection(text, encoding = "UTF-8")
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
source("obsFileName.R")
allData <- numeric()
for (i in id) {
filename <- obsFileName(directory, i)
data <- read.csv(filename)
if (pollutant == "sulfate") {
allData <- c(allData, data$sulfate)
} else if (pollutant == "nitrate") {
allData <- c(allData, data$nitrate)
}
}
mean(allData, na.rm=TRUE)
}
}
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
directory <- read.csv()
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
source("obsFileName.R")
allData <- numeric()
for (i in id) {
filename <- obsFileName(directory, i)
data <- read.csv(filename)
if (pollutant == "sulfate") {
allData <- c(allData, data$sulfate)
} else if (pollutant == "nitrate") {
allData <- c(allData, data$nitrate)
}
}
mean(allData, na.rm=TRUE)
}
}
pollutantmean("specdata", "sulfate", 1:10)
source('~/GitHub/datasciencecoursera/R Programming/specdata/pollutemean.R')
}
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
source("obsFileName.R")
allData <- numeric()
for (i in id) {
filename <- obsFileName(directory, i)
data <- read.csv(filename)
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
if (pollutant == "sulfate") {
allData <- c(allData, data$sulfate)
} else if (pollutant == "nitrate") {
allData <- c(allData, data$nitrate)
}
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
}
mean(allData, na.rm=TRUE)
}
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
source("complete.R")
complete("specdata", 1)
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 30:25)
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
cr <- corr("specdata", 150)
head(cr)
source("submitscript1.R")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
setwd("~/GitHub/datasciencecoursera/R Programming")
## Matrix inversion is usually a costly computation. The following functions
## provide possibility of caching the inverse of a matrix rather than compute
## it repeatedly.
## This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
inversed <- NULL
set <-function(y) {
x <<- y
inversed <<- NULL
}
get <- function() x
setInversed <- function(newInversed) inversed <<- newInversed
getInversed <- function() inversed
list(set = set, get = get, setInversed = setInversed, getInversed = getInversed)
}
## This function computes the inverse of the special "matrix"
## returned by makeCacheMatrix above. If the inverse has already
## been calculated (and the matrix has not changed), then the
## cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inversed <- x$getInversed()
if(!is.null(inversed)) {
message("getting cached data")
return(inversed)
}
data <- x$get()
inversed <- solve(data, ...)
x$setInversed(inversed)
inversed
}
source(cachematrix.R)
clear
}
}
}
## Matrix inversion is usually a costly computation. The following functions
## provide possibility of caching the inverse of a matrix rather than compute
## it repeatedly.
## This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
inversed <- NULL
set <-function(y) {
x <<- y
inversed <<- NULL
}
get <- function() x
setInversed <- function(newInversed) inversed <<- newInversed
getInversed <- function() inversed
list(set = set, get = get, setInversed = setInversed, getInversed = getInversed)
}
## This function computes the inverse of the special "matrix"
## returned by makeCacheMatrix above. If the inverse has already
## been calculated (and the matrix has not changed), then the
## cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inversed <- x$getInversed()
if(!is.null(inversed)) {
message("getting cached data")
return(inversed)
}
data <- x$get()
inversed <- solve(data, ...)
x$setInversed(inversed)
inversed
}
makeCacheMatrix()
cacheSolve()
cacheSolve(123)
setwd("~/GitHub/datasciencecoursera/R Programming/Assignment 3")
